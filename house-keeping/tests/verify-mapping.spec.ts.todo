import { verifyMappingFromBaseStructure } from '../dist/utils/verify-mapping';

const goodSchema = {
  npmScope: {
    name: 'NPM scope',
    key: '__tsnp__npm_scope',
    description: 'npm scope with @',
    default: null
  },
  githubScope: {
    name: 'GitHub scope',
    key: '__tsnp__github_scope',
    description: 'Mostly this is your username. Github scope without @',
    default: null
  },
  packageName: {
    name: 'Package name',
    key: '__tsnp__package_name',
    description: 'Mostly this is your username. Github scope without @',
    default: null
  }
};

// name missing
const badSchema1 = {
  npmScope: {
    key: '__tsnp__npm_scope',
    description: 'npm scope with @',
    default: null
  }
};

// key missing
const badSchema2 = {
  githubScope: {
    name: 'GitHub scope',
    description: 'Mostly this is your username. Github scope without @',
    default: null
  }
};

// default missing
const badSchema3 = {
  packageName: {
    name: 'Package name',
    key: '__tsnp__package_name'
  }
};

describe('testing verifyMappingFromBaseStructure', () => {
  test('should be able to verify the mapping schema - success', () => {
    expect(verifyMappingFromBaseStructure(goodSchema)).toBe(true);
  });

  test('should throw err on bad schema type 1', () => {
    expect(verifyMappingFromBaseStructure(badSchema1)).toThrow();
  });

  test('should throw err on bad schema type 2', () => {
    expect(verifyMappingFromBaseStructure(badSchema2)).toThrow();
  });

  test('should throw err on bad schema type 3', () => {
    expect(verifyMappingFromBaseStructure(badSchema3)).toThrow();
  });
});
